import torch
import torch.nn as nn
import torch.nn.init as init

class Fire(nn.Module):

    def __init__(self, inplanes, squeeze_planes,expand_planes,):
        super(Fire, self).__init__()
        self.inplanes = inplanes
        self.squeeze = nn.Conv2d(inplanes, squeeze_planes, kernel_size=1)
        self.squeeze_activation = nn.ReLU(inplace=True)

        self.expand1x1 = nn.Conv2d(squeeze_planes, expand_planes,kernel_size=1)
        self.expand1x1_activation = nn.ReLU(inplace=True)

        self.expand3x3 = nn.Conv2d(squeeze_planes, expand_planes,kernel_size=3, padding=1)
        self.expand3x3_activation = nn.ReLU(inplace=True)

        self.expand5x5 = nn.Conv2d(squeeze_planes, expand_planes,kernel_size=5, padding=2)
        self.expand5x5_activation = nn.ReLU(inplace=True)

        self.expand7x7 = nn.Conv2d(squeeze_planes, expand_planes,kernel_size=7, padding=3)
        self.expand7x7_activation = nn.ReLU(inplace=True)


    def forward(self, x):
        x = self.squeeze_activation(self.squeeze(x))
        x_1x1 = self.expand1x1_activation(self.expand1x1(x))
        x_3x3 = self.expand3x3_activation(self.expand3x3(x))
        x_5x5 = self.expand5x5_activation(self.expand5x5(x))
        x_7x7 = self.expand7x7_activation(self.expand7x7(x))
        return torch.cat([x_1x1, x_3x3, x_5x5, x_7x7], 1)

class NU_LiNet(nn.Module):
    def __init__(self, num_class):
        super(NU_LiNet, self).__init__()
        self.num_classes = num_class
        self.features = nn.Sequential(
            nn.Conv2d(3, 64, kernel_size=5, stride=1, padding=2),
            nn.ReLU(True),
            nn.MaxPool2d(kernel_size=3, stride=2),
            nn.Conv2d(64, 64, kernel_size=3, stride=1,padding=1),
            nn.ReLU(True),
            nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1),
            nn.ReLU(True),
            nn.MaxPool2d(kernel_size=3, stride=2),
            Fire(64, 16, 64),
            nn.MaxPool2d(kernel_size=3, stride=2),
            Fire(256, 16, 64),
        )
        final_conv = nn.Conv2d(256, self.num_classes, kernel_size=1)
        self.classifier = nn.Sequential(
            final_conv,
            nn.ReLU(inplace=True),
            nn.AdaptiveAvgPool2d((1, 1)))
        self.softmax = nn.LogSoftmax(dim=1)

        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                if m is final_conv:
                    init.normal_(m.weight, mean=0.0, std=0.01)
                else:
                    init.kaiming_uniform_(m.weight)
                if m.bias is not None:
                    init.constant_(m.bias, 0)

    def forward(self, x):
        x = self.features(x)
        x = self.classifier(x)
        x = self.softmax(x)
        return x.view(x.size(0), self.num_classes)
